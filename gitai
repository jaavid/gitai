cat ~/.bin/gitai/gitai
#!/bin/bash

# فایل: ~/.bin/gitai

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
API_BASE="https://api.avalapis.ir/v1/chat/completions"
# MODEL="gpt-4o-mini"
MODEL="gpt-4.i-nano"
MAX_DIFF_LENGTH=12000

if [ -f "$SCRIPT_DIR/.gitai" ]; then
  source "$SCRIPT_DIR/.gitai"
fi

API_KEY=${GITAI_API_KEY}

if [ -z "$API_KEY" ]; then
  echo "Error: GITAI_API_KEY not found."
  echo "Please set GITAI_API_KEY in $SCRIPT_DIR/.gitai or as an environment variable."
  exit 1
fi

# نمایش وضعیت گیت
echo
echo "==== Git Status ===="
git status
echo "===================="
echo

# سوال: میخوای همه فایل‌ها رو stage کنم؟
read -p "Stage all changes (git add -A)? (y/n): " ADD_CONFIRM

if [[ "$ADD_CONFIRM" =~ ^[Yy]$ ]]; then
  git add -A
  echo "All changes staged."
else
  echo "Continuing without adding files."
fi

# گرفتن تغییرات استیج شده
GIT_DIFF=$(git diff --cached)

if [ -z "$GIT_DIFF" ]; then
  echo "No staged changes found. Stage your changes first."
  exit 1
fi

TRIMMED_DIFF="$GIT_DIFF"
DIFF_LENGTH=${#GIT_DIFF}

if [ "$DIFF_LENGTH" -gt "$MAX_DIFF_LENGTH" ]; then
  echo "⚠️ Diff is too long ($DIFF_LENGTH characters). Trimming to first $MAX_DIFF_LENGTH characters."
  TRIMMED_DIFF="${GIT_DIFF:0:$MAX_DIFF_LENGTH}"
fi

PROMPT="You are a Git expert AI assistant. Given the following git diff, generate a structured commit message following the Conventional Commits format.

Your output must be in this format:

Title: <type>(<scope>): <short summary>
Description: <detailed explanation of what and why, in plain English>

- Use one of these types: feat, fix, docs, chore, refactor, test, build, ci, style
- The scope is optional, but if identifiable, use the folder or feature name (e.g., auth, api, ui)
- Keep the title under 72 characters
- Write the description in full sentences and include reasoning if possible

Git diff:
$TRIMMED_DIFF
"

JSON_PAYLOAD=$(jq -n \
  --arg model "$MODEL" \
  --arg user "$PROMPT" \
  '{
    model: $model,
    messages: [
      {role: "user", content: $user}
    ],
    temperature: 0.4
  }')

RESPONSE=$(curl -s "$API_BASE" \
  -H "Authorization: Bearer $API_KEY" \
  -H "Content-Type: application/json" \
  -d "$JSON_PAYLOAD")

# echo -e "\n📥 Raw Response:\n$RAW_RESPONSE\n"

COMMIT_MESSAGE=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')

if [ "$COMMIT_MESSAGE" == "null" ]; then
  echo "Error from OpenAI:"
  echo "$RESPONSE"
  exit 1
fi

echo
echo "==== Suggested Commit Message ===="
echo "$COMMIT_MESSAGE"
echo "=================================="
echo

read -p "Use this commit message? (y/n): " CONFIRM

if [[ "$CONFIRM" =~ ^[Yy]$ ]]; then
  TITLE=$(echo "$COMMIT_MESSAGE" | grep -i '^Title:' | sed 's/Title: //')
  DESCRIPTION=$(echo "$COMMIT_MESSAGE" | grep -i '^Description:' | sed 's/Description: //')
  
  git commit -m "$TITLE" -m "$DESCRIPTION"
  
  echo
  read -p "Push to remote? (y/n): " PUSH_CONFIRM
  if [[ "$PUSH_CONFIRM" =~ ^[Yy]$ ]]; then
    git push
  else
    echo "Push skipped."
  fi
else
  echo "Commit canceled."
fi%                                                                                
